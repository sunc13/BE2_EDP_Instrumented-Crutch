//Gyroscope test using library FIMU_ITG3200


#include <FIMU_ITG3200.h>

/*INCLUDE NECESSARY LIBRARIES*/
#include <Wire.h> //this is the wire library for the I2C communication protocol, which governs how to read in data from the gyro
static const float GYRO_SENSITIVITY=14.375;
static const float GYRO_TEMP_SENSIVITY = 280.0;
static const float GYRO_TEMP_OFFSET_CELCIUS = 35.0;

/*INITIALISE REGISTERS FOR THE CONNECTION AND THE PARAMETERS*/
char Gyro_SmpleRtDiv = 0x15; //address of the Sample Rate divider. the gyro is already sampled at 1khz or 8khz and can be tailored to suit the needs of the user, by changing the divider
char Gyro_DLPF_FS = 0x16;//register to set the max range of the gyro and internal sample rate

/*INITIALISE REGISTERS THAT STORE THE GYROSCOPE READING*/
char Gyro_Xout_H = 0x1D;
char Gyro_Xout_L = 0x1E;
char Gyro_Yout_H = 0x1F;
char Gyro_Yout_L = 0x20;
char Gyro_Zout_H = 0x21;
char Gyro_Zout_L = 0x22;
//the data read in by the gyroscope for each axis. each axis has 16 bits, this is split into 2 8 bit numbers by the gyro board.


/*INITIALISE PARAMETER VARIABLES NEEDED FOR SOME REGISTERS.*/
char Gyro_DLPF_SEL_0 = 1<<3;
char Gyro_DLPF_SEL_1 = 1<<4;
//this will set the full scale range of the gyro. We left shift the number because this SEL parameter is set in the 3rd and 4th bits of the DLPF_FS register, 
//where it will be set to a value of 3 this sets the max range to +- 2000 deg/sec.
char Gyro_DLPF_CFG_1 = 1<<1;
char Gyro_DLPF_CFG_2 = 1<<2;
//we now need to initialise the parameters for the registers, which will hold values/settings we will use
///the parameters will be set later, so that we can set the internal sample rate and low pass filter bandwidth
//these are from preset values on the DLPF_FS register, which has 2 parameters we can change.
//we can also change the SmpleRtDiv to  set the overall sampling rate, using the equation given in the data sheet.
//our sampling rate will be 10hz and our low pass bandwith filter will be 5-10Hz

/*SET THE GYRO ADDRESS*/
char GyroAdd = 0x69; //set the address of the I2C connection

/*SETUP CONNECTION TO THE BOARD*/
void setup()
{
  Serial.begin(9600);//initialises a serial connection, by opening the serial port, setting a rate of data transmission
  Wire.begin(); // sets up the I2C connection, by joining the I2C bus (the bus that transports data and register addresses) to arduino.
  //this allows communication between the arduino and the gyro
  Gyro_Write(GyroAdd, Gyro_SmpleRtDiv, 99); //this changes the sample rate parameter held by the register to 10Hz based on the equation givenin data sheet. the Write is a function written below, which will
  //go to the address given (here i have given it as the register holding sample rate) and writes to it.
  Gyro_Write(GyroAdd, Gyro_DLPF_FS, (Gyro_DLPF_SEL_0|Gyro_DLPF_SEL_1|Gyro_DLPF_CFG_1|Gyro_DLPF_CFG_2));
  //the same thing will be done for the bandwith low pass filter and the internal sampling rate, to ensure our overall sample rate is 10hz
}

/*SET LOOP CODE*/
void loop() 
{
  int Gyro_XRate, Gyro_YRate, Gyro_ZRate; //variables that will hold the data for the axes.
  Gyro_XRate = Gyro_GetGyroRead(GyroAdd,Gyro_Xout_H,Gyro_Xout_L);
  Gyro_YRate = Gyro_GetGyroRead(GyroAdd,Gyro_Yout_H,Gyro_Yout_L);
  Gyro_ZRate = Gyro_GetGyroRead(GyroAdd,Gyro_Zout_H,Gyro_Zout_L);
  //gets each of the gyroscope readings for each axis 
  Serial.print(Gyro_XRate);
  Serial.print('\t');
  Serial.print(Gyro_YRate);
  Serial.print('\t');
  Serial.println(Gyro_ZRate); 
  delay(100);//1 reading per 100ms will result in an output of 10Hz, the same as the output rate of the gyro. this value cannot be faster than the gyro sample rate.
  }
  void Gyro_Write(char GyroAdd, char Gyro_RegAdd, char Gyro_data)//function to write data to an address in the gyro
  {
    Wire.beginTransmission(GyroAdd);
    //set up I2C connection from the board to the gyro, using GyroAdd
    Wire.write(Gyro_RegAdd);
    //set up connection to the register address we want to write to, using RegAdd
    Wire.write(Gyro_data);
    //set the parameters by writing to the address which holds the parameters, specifying which parameter you wish to have, using data
    Wire.endTransmission();
    //end the connection to the gyro.
  }

unsigned char Gyro_Read(char GyroAdd, char Gyro_RegAdd) //returns the data that is read in the address. it is unsigned char because it is
{
  unsigned char Gyro_Read_Data = 0;
  //set a character variable which we will return
  Wire.beginTransmission(GyroAdd);
  //connect the board to the gyro via I2C
  Wire.requestFrom(Gyro_RegAdd, 1);
  //requests 1 byte of data from the register address specified.
  if(Wire.available())
  {
    Gyro_Read_Data = Wire.read();
    //set data from wire to the variable
  }
  Wire.endTransmission();
  //end communication with gyro
  return Gyro_Read_Data;
  //return the data retrieved.
}
int Gyro_GetGyroRead(char GyroAdd,char Gyro_RegAdd1,char Gyro_RegAdd2)
{
  int Gyro_GetGyroRead_Data1 = 0;
  int Gyro_GetGyroRead_Data2 = 0;
  int Gyro_GetGyroRead_Data = 0;
  //set data variable which we will return
  Gyro_GetGyroRead_Data1 = Gyro_Read(GyroAdd, Gyro_RegAdd1);//
  //store the data to the variable
  Gyro_GetGyroRead_Data2 = Gyro_Read(GyroAdd, Gyro_RegAdd2);
  Gyro_GetGyroRead_Data = Gyro_GetGyroRead_Data1<<8;
  Gyro_GetGyroRead_Data |= Gyro_GetGyroRead_Data2;
  //combine the first part of data to the second, to get a 16 bit reading
  //return this data variable
}
